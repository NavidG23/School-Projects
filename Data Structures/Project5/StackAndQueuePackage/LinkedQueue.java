package StackAndQueuePackage;public class LinkedQueue<T> implements QueueInterface<T>{	private QueueNode<T> firstNode;	private QueueNode<T> lastNode;	public LinkedQueue()	{		firstNode = null;		lastNode = null;	} // end default constructor		public void enqueue(T newEntry)	{		QueueNode<T> newNode = new QueueNode<T>(newEntry, null);				if (isEmpty())			firstNode = newNode;		else			lastNode.setNextNode(newNode);					lastNode = newNode;	} // end enqueue		public T getFront()	{		T front = null;				if (!isEmpty())			front = firstNode.getData();		return front;	} // end getFront				public T dequeue()	{		T front = null;				if (!isEmpty())		{			front = firstNode.getData();			firstNode = firstNode.getNextNode();						if (firstNode == null)				lastNode = null;		} // end if				return front;	} // end dequeue			public boolean isEmpty()	{		return (firstNode == null) && (lastNode == null);	} // end isEmpty		public void clear()	{		firstNode = null;		lastNode = null;	} // end clear} // end Linkedqueue