package StackAndQueuePackage;import java.util.Stack;public class LinkedStack<T> implements StackInterface<T>{	private StackNode<T> topNode;		public LinkedStack()	{		topNode = null;	} // end default constructor		public void push(T newEntry)	{		StackNode<T> newNode = new StackNode<T>(newEntry, topNode);		topNode = newNode;	} // end push	public T peek()	{		T top = null;				if (topNode != null)			top = topNode.getData();				return top;	} // end peek	public T pop()	{		T top = null;				if (topNode != null)      {			top = topNode.getData();	      topNode = topNode.getPreviousNode();       } // end if	   return top;	} // end pop	public boolean isEmpty()	{		return topNode == null;	} // end isEmpty		public void clear()	{		topNode = null;		} // end clear} // end LinkedStack